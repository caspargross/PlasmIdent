/*
 *-------------------------------------  
 * PLASMID IDENT    MAIN CONFIGURATION
 *-------------------------------------
 * Default config for all environments
 */


manifest {
    mainScript = 'main.nf'
    author = 'Caspar GroÃŸ'
    homePage = 'https://github.com/caspargross/plasmidIdentification'
    description = 'Hybrid assembly pipeline for plasmid analysis'
    name = 'plasmIdent'
    nextflowVersion = '>=0.32.0'
    version = '0.7'
}

// Default parameters
params {
    version = false
    help = false
}

profiles 
    {   
    // Default profile, uses Docker to run 
    // Assumes required conda envs are available on machine
    standard {
        includeConfig 'conf/base.config'
        includeConfig 'conf/docker.config'
    }   

    // Execution on local machine 
    local {
        includeConfig 'conf/base.config'
    }

    // Execution inside pathoLogic web App
    app {
        includeConfig 'conf/app.config'
    }

    // Run test  with reduced test dataset and laptop specs
    test {
        includeConfig 'conf/test.config'
        includeConfig 'conf/docker.config'
    }   

    // Run local test with reduced test dataset and laptop specs (no Docker)
    localtest {
        includeConfig 'conf/test.config'
    }   

    // Runs pipeline using Singularity instead of docker
    singularity {
        includeConfig 'conf/base.config'
        includeConfig 'conf/singularity.config'

    }   

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

